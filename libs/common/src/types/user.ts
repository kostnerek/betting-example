// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: user.proto

/* eslint-disable */
import type { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Bet } from "./bet";
import { SuccessResponse } from "./common";

export interface User {
  id: string;
  balance: number;
  username: string;
  bets: Bet[];
}

export interface UserIdentityRequest {
  username: string;
}

export interface UserAuthRequest {
  username: string;
}

export interface TokenResponse {
  token: string;
}

export interface UserServiceClient {
  /** rpc UserLogin (UserAuthRequest) returns (TokenResponse); */

  userRegister(request: UserAuthRequest, metadata: Metadata, ...rest: any): Observable<SuccessResponse>;

  /** rpc ValidateToken (TokenRequest) returns (ValidateTokenResponse); */

  userMe(request: UserIdentityRequest, metadata: Metadata, ...rest: any): Observable<User>;
}

export interface UserServiceController {
  /** rpc UserLogin (UserAuthRequest) returns (TokenResponse); */

  userRegister(request: UserAuthRequest, metadata: Metadata, ...rest: any): Observable<SuccessResponse>;

  /** rpc ValidateToken (TokenRequest) returns (ValidateTokenResponse); */

  userMe(request: UserIdentityRequest, metadata: Metadata, ...rest: any): Observable<User>;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["userRegister", "userMe"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
