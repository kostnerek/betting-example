// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: game.proto

/* eslint-disable */
import type { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { BetTeam, Empty, PaginationDto, PaginationMetadata, SuccessResponse } from "./common";

export interface GameRunNowRequest {
  id: string;
}

export interface GameListRequest {
  pagination: PaginationDto | null;
  teamName?: string | null | undefined;
  commenceTime?: string | null | undefined;
}

export interface GameListResponse {
  games: Game[];
  pagination: PaginationMetadata | null;
}

export interface GameByIdRequest {
  id: string;
}

export interface GameListByIdsRequest {
  ids: string[];
}

export interface GameListByIdsResponse {
  games: Game[];
}

export interface Odd {
  team: BetTeam;
  odds: number;
}

export interface Game {
  id: string;
  homeTeam: string;
  awayTeam: string;
  odds: Odd[];
  commenceTime: string;
  winner?: BetTeam | null | undefined;
  homeTeamScore?: number | null | undefined;
  awayTeamScore?: number | null | undefined;
}

export interface GameServiceClient {
  gameListQuery(request: GameListRequest, metadata: Metadata, ...rest: any): Observable<GameListResponse>;

  gameListByIds(request: GameListByIdsRequest, metadata: Metadata, ...rest: any): Observable<GameListByIdsResponse>;

  gameById(request: GameByIdRequest, metadata: Metadata, ...rest: any): Observable<Game>;

  gameRefresh(request: Empty, metadata: Metadata, ...rest: any): Observable<SuccessResponse>;

  gameRunNow(request: GameRunNowRequest, metadata: Metadata, ...rest: any): Observable<SuccessResponse>;
}

export interface GameServiceController {
  gameListQuery(request: GameListRequest, metadata: Metadata, ...rest: any): Observable<GameListResponse>;

  gameListByIds(request: GameListByIdsRequest, metadata: Metadata, ...rest: any): Observable<GameListByIdsResponse>;

  gameById(request: GameByIdRequest, metadata: Metadata, ...rest: any): Observable<Game>;

  gameRefresh(request: Empty, metadata: Metadata, ...rest: any): Observable<SuccessResponse>;

  gameRunNow(request: GameRunNowRequest, metadata: Metadata, ...rest: any): Observable<SuccessResponse>;
}

export function GameServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["gameListQuery", "gameListByIds", "gameById", "gameRefresh", "gameRunNow"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("GameService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("GameService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const GAME_SERVICE_NAME = "GameService";
