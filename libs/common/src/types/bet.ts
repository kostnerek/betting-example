// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: bet.proto

/* eslint-disable */
import type { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { BetTeam, SuccessResponse } from "./common";
import { Game } from "./game";

export interface BetPlaceRequest {
  gameId: string;
  amount: number;
  team: BetTeam;
  username: string;
}

export interface BetsProcessByGameIdRequest {
  gameId: string;
  winner: BetTeam;
}

export interface Bet {
  id: string;
  userId: string;
  gameId: string;
  amount: number;
  team: BetTeam;
  game: Game | null;
  won?: boolean | null | undefined;
}

export interface BetServiceClient {
  betPlace(request: BetPlaceRequest, metadata: Metadata, ...rest: any): Observable<Bet>;

  betsProcessByGameId(
    request: BetsProcessByGameIdRequest,
    metadata: Metadata,
    ...rest: any
  ): Observable<SuccessResponse>;
}

export interface BetServiceController {
  betPlace(request: BetPlaceRequest, metadata: Metadata, ...rest: any): Observable<Bet>;

  betsProcessByGameId(
    request: BetsProcessByGameIdRequest,
    metadata: Metadata,
    ...rest: any
  ): Observable<SuccessResponse>;
}

export function BetServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["betPlace", "betsProcessByGameId"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BetService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BetService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BET_SERVICE_NAME = "BetService";
